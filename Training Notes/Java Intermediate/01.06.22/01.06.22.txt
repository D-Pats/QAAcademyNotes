JDBC
	JDBC - Java database Connector/ Connectivity
		Application Programming Interface (API)
			Used for communicating
			Contract (interface) defining how we interact with something
			In Java, an API is normally either commnicated with over a network or it is the classes and methods on those classes which make up the API
			
			In the case if the JDBC API, it is just a contract consisting of classes and methods on those classes and methods defining how we interact with a relational database
			
			
	Maven reposisitories basically host repositries of JAR files (compiled Java applications)
		We can manually download these but Maven does it for us.
		Maven repo is an artifact repo
		
	
	DAO Design Pattern
		Data Access Object
		
		The DAO pattern abstracts database access/communication
		
	
Creating a Java application that can communicate with a database
	Create a maven project with a database already built
	Give the pom.xml file it's properties to tell it which version of java we're targeting and our source encoding
		Properties will be already added in the week 5 project
	Go to Maven Repository to get the dependencies, MySQL Connector /J - put this into the pom.xml file
	Right click Project > Maven > Update project
		Alternatively right click project > Run As > Maven Install


Connecting to the database
	Need 3 main things (with examples)
		Server URL
			// "jdbc:<database vendor>://<URL>:<port number>/<database name>?<parameters>";
			for localhost
			private static final String connectionurl = "jdbc:mysql://localhost:3306/<dbname>";
		Username
			private static final String username = "root";
		Password
			private static final String password = "root";
		
	5 General steps to each database transaction
		Get connection object which allows you to talk to the database
		Create and prepare an SQL statement for execution against the database
		Execute the SQLstatement and store the results in a variable
		If the result is a resultset, unwrap it into its values
			A resultset is just a Java Object representing a database table and its results
		Close the connection
			In enterprise systems we don't usually close the connection straight away. It instead often goes to a connection pool which holds multiple connection objects which can be used by the application
		
	Open Schema in the resource folder of the Java Project
		This will open in MySQL Workbench but unconnected
			Select Database in the top bar and select Connect to Database
			Select instance of MySQL in the Stored Connection dropdown
			Copy and paste Schema content into new SQL Query file in local instance of MySQL Workbench
			Run the file
			
	
	Open a connection (Step 1)
		//1.
		try {
		connection <connvariable> = getConnection();
		EXAMPLE
			conn = getConnection();
			
		Connection is from java.sql, part of the JDBC API
		
		
	Create and prepare, and execute SQL Statements. Unwrap dataset. (Steps 2-4)
		List<Users (or other type)> users = findAll(connvariable);
		
		for (User user : users) {
			System.out.println(user);
		}
		// users.forEach(System.out::println);
		// users.forEach (user -> System.out.println(user));
	
		} catch (SQL Exception e) // where e is the variable we store the exception in {
			System.err.println("Something went wrong during the transaction");
		} finally {
			try {
				// Close the connection (Step 5)
				if (conn != null) // set conn = null before the try {
				conn.close();
				}
			} catch (SQLException e) {
				System.err.println("Something went wrong closing the connection");
			}
		}	
		

	Finally
		Finally always runs regardless of what happens in the code before - finally always runs
	
	
	Users
		A java object we have created with the variables matching the fields in the table
		Default constructor (empty contructor with the super(); )
		Getters and setters for each field
		hashCode
			Used internally by certain data structures to optimise access times to data (in structures such as hashMaps and HashSets)
		equals
			We use this for comparing two objects t see if they are equal, do their fields contain the same data
		toString
					
					All of these can be created using source autogeneration
					
	
	How does this work (Steps 2 - 4)
	
		We have the connection, how do we get it?
				
			private static Connection getConnection() throws SQLException {
				// getConnection() uses Driver Manager
				//Driver manager is part of the JDBC API
				return DriverManager.getConnection(connectionURL, username, password);
				// after passing through the variables, getConnection() returns a connection object
			}
		
		Once you have connection we can work with the database
			private static List<User> findAll(Connection conn) throws SQLException {
				//2. 
				statement stmt = conn.createStatement();
				// Statement is part of the JDBC API
				
				//3.
				final String sql = "SELECT * FROM user";
				ResultSet rs = stmt.executeQuery(sql);
				//this is our SQL query in string form and saving the result into a result set
				// ResultSet is part of the JDBC API
				// executeQuery() is for executing SELECT Statements, only statements which do not modify the state of the database
				
				//4.
				List<User> users = unwrapSet(rs);
				
				return users; 
			}
				//In example we have put it in findAll(), this takes in our connnection to the database, creates a statement then creates a resultset with the SELECT query
		
			
		Unwrapping (Step 4 continued)
			private static List<User> unwrapSet(ResultSet rs) throw SQLException {
				List<User> users = new ArrayList,.();
			
				//iterate over the result set until nothing is left
				//call rs.next() to move the pointer in the resultset to the next location
				//think of it like how you iterate through a list, how the index goes up
				//Except that the first time we call .next, it makes the pointer point to the first item in that resultset
			
				while (rs.next()) {
					User user = unwrap(rs); // get a user ut of the result set
					users.add(user); // add them to a list for returning after
				}
			
				return users;
			}	
		
			
			private static User unwrap(ResultSet rs) throws SQLException {
				// ResultSets start 1 position before our entities
				//this means we need to call rs.next() once before it points at the first entity
				
				User user = new User()left
				
				//use a getXXXX() method to retrieve data, pass in the field name as a parameter
				//rs.get can use index for field, indexes in SQL start at 1 not 0
				Long id = rs.getLong("id");
				String forename = rs.getString("forename");
				String surname = rs.getString("surname");
				int age = rs.getInt("age");
				
				user.setID(id);
				user.setForename(forename);
				user.setSurname(surname);
				user.setAge(age);
				return user;
				}
			
	
Debug mode
	Put in a breakpoint - there needs to be a statement on that line
		Run debug from the top
		Debug runs through the code line by line
		